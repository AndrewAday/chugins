//-----------------------------------------------------------------------------
// Entaro ChucK Developer!
// This is a Chugin boilerplate, generated by chuginate!
//-----------------------------------------------------------------------------

// this should align with the correct versions of these ChucK files
#include "chuck_dl.h"
#include "chuck_def.h"

#include "FFTConvolver.h"
#include "TwoStageFFTConvolver.h"
#include "Utilities.h"

// general includes
#include <stdio.h>
#include <limits.h>

// declaration of chugin constructor
CK_DLL_CTOR(convrev_ctor);
// declaration of chugin desctructor
CK_DLL_DTOR(convrev_dtor);

// example of getter/setter
CK_DLL_MFUN(convrev_setParam);
CK_DLL_MFUN(convrev_getParam);

CK_DLL_MFUN(convrev_setOrder);
CK_DLL_MFUN(convrev_getOrder);

// for Chugins extending UGen, this is mono synthesis function for 1 sample
CK_DLL_TICK(convrev_tick);

// this is a special offset reserved for Chugin internal data
t_CKINT convrev_data_offset = 0;


/*
TODO
- store IR buffer as member variable
- buffer incoming samples in circular buffer
  - cpp circular buffer implementation?
  - https://en.wikipedia.org/wiki/Circular_buffer
- link with cpp library that can do block convolutions in freq domain


- LINK AudioFFT files, make sure it actually compiles

- can I do multithreading in chugin?

#if defined(FFTCONVOLVER_USE_SSE)
    _mm_malloc(ptr) and _mm_free(ptr) for memory-aligned buffers
#else


Baby steps
1. get fft convolution working at all. Buffer whole input, convolve, and output.
  - this is the naive block conv described in paper
2. implement equivalent of FFTConvolveMono.ck with FFTConvolver, uniform partitions
3. search for existing implementations of Gardner's paper

*/

// class definition for internal Chugin data
// (note: this isn't strictly necessary, but serves as example
// of one recommended approach)
class ConvRev
{
public:
    // constructor
    ConvRev( t_CKFLOAT fs)
    {
        m_param = 0;
        _order = 0;
        _ir_buffer = new float[0];
        _convolver = new fftconvolver::FFTConvolver();
    }

    ~ConvRev()
    {
        delete[] _ir_buffer;
        delete _convolver;
    }

    // for Chugins extending UGen
    SAMPLE tick( SAMPLE in )
    {
        // default: this passes whatever input is patched into Chugin
        return in;
    }

    // set parameter example
    t_CKFLOAT setParam( t_CKFLOAT p )
    {
        m_param = p;
        return p;
    }

    // get parameter example
    t_CKFLOAT getParam() { return m_param; }

    t_CKINT setOrder( t_CKINT m )
    {

        delete[] _ir_buffer;

        _ir_buffer = new float[m];

        for (int i = 0; i < m; i++)  {
            _ir_buffer[i] = 0.0;
        }

        return m;
    }

    t_CKINT getOrder() { return _order; }

private:
    // instance data
    t_CKFLOAT m_param;

    t_CKINT _order;
    float *_ir_buffer;
    fftconvolver::FFTConvolver *_convolver;

};


// query function: chuck calls this when loading the Chugin
// NOTE: developer will need to modify this function to
// add additional functions to this Chugin
CK_DLL_QUERY( ConvRev )
{
    // hmm, don't change this...
    QUERY->setname(QUERY, "ConvRev");

    // begin the class definition
    // can change the second argument to extend a different ChucK class
    QUERY->begin_class(QUERY, "ConvRev", "UGen");

    // register the constructor (probably no need to change)
    QUERY->add_ctor(QUERY, convrev_ctor);
    // register the destructor (probably no need to change)
    QUERY->add_dtor(QUERY, convrev_dtor);

    // for UGen's only: add tick function
    QUERY->add_ugen_func(QUERY, convrev_tick, NULL, 1, 1);

    // NOTE: if this is to be a UGen with more than 1 channel,
    // e.g., a multichannel UGen -- will need to use add_ugen_funcf()
    // and declare a tickf function using CK_DLL_TICKF

    // example of adding setter method
    QUERY->add_mfun(QUERY, convrev_setParam, "float", "param");
    // example of adding argument to the above method
    QUERY->add_arg(QUERY, "float", "arg");

    // example of adding getter method
    QUERY->add_mfun(QUERY, convrev_getParam, "float", "param");


    QUERY->add_mfun(QUERY, convrev_setOrder, "int", "order");
    QUERY->add_arg(QUERY, "int", "arg");

    QUERY->add_mfun(QUERY, convrev_getOrder, "int", "order");

    // this reserves a variable in the ChucK internal class to store
    // referene to the c++ class we defined above
    convrev_data_offset = QUERY->add_mvar(QUERY, "int", "@cr_data", false);

    // end the class definition
    // IMPORTANT: this MUST be called!
    QUERY->end_class(QUERY);

    // wasn't that a breeze?
    return TRUE;
}


// implementation for the constructor
CK_DLL_CTOR(convrev_ctor)
{
    // get the offset where we'll store our internal c++ class pointer
    OBJ_MEMBER_INT(SELF, convrev_data_offset) = 0;

    // instantiate our internal c++ class representation
    ConvRev * cr_obj = new ConvRev(API->vm->get_srate(API, SHRED));

    // store the pointer in the ChucK object member
    OBJ_MEMBER_INT(SELF, convrev_data_offset) = (t_CKINT) cr_obj;
}


// implementation for the destructor
CK_DLL_DTOR(convrev_dtor)
{
    // get our c++ class pointer
    ConvRev * cr_obj = (ConvRev *) OBJ_MEMBER_INT(SELF, convrev_data_offset);
    // check it
    if( cr_obj )
    {
        // clean up
        delete cr_obj;
        OBJ_MEMBER_INT(SELF, convrev_data_offset) = 0;
        cr_obj = NULL;
    }
}


// implementation for tick function
CK_DLL_TICK(convrev_tick)
{
    // get our c++ class pointer
    ConvRev * cr_obj = (ConvRev *) OBJ_MEMBER_INT(SELF, convrev_data_offset);

    // invoke our tick function; store in the magical out variable
    if(cr_obj) *out = cr_obj->tick(in);

    // yes
    return TRUE;
}


// example implementation for setter
CK_DLL_MFUN(convrev_setParam)
{
    // get our c++ class pointer
    ConvRev * cr_obj = (ConvRev *) OBJ_MEMBER_INT(SELF, convrev_data_offset);
    // set the return value
    RETURN->v_float = cr_obj->setParam(GET_NEXT_FLOAT(ARGS));
}


// example implementation for getter
CK_DLL_MFUN(convrev_getParam)
{
    // get our c++ class pointer
    ConvRev * cr_obj = (ConvRev *) OBJ_MEMBER_INT(SELF, convrev_data_offset);
    // set the return value
    RETURN->v_float = cr_obj->getParam();
}

CK_DLL_MFUN(convrev_setOrder)
{
    ConvRev * cr_obj = (ConvRev *) OBJ_MEMBER_INT(SELF, convrev_data_offset);
    RETURN->v_int = cr_obj->setOrder(GET_NEXT_INT(ARGS));
}

CK_DLL_MFUN(convrev_getOrder)
{
    ConvRev * cr_obj = (ConvRev *) OBJ_MEMBER_INT(SELF, convrev_data_offset);
    RETURN->v_int = cr_obj->getOrder();
}
